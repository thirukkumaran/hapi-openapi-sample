openapi: 3.0.0
info:
  title: Users
  version: '1.0'
  description: User APIs
  contact:
    name: Thiru
    email: thiru_natarajan@hive.gov.sg
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/200-GetUser'
        '400':
          $ref: '#/components/responses/400'
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      parameters: []
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          $ref: '#/components/responses/200-PatchUser'
        '400':
          $ref: '#/components/responses/400'
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /users:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '201':
          $ref: '#/components/responses/201-CreateUser'
        '400':
          $ref: '#/components/responses/400'
      requestBody:
        content:
          application/json:
            schema:
              description: User
              type: object
              x-examples:
                example-1:
                  firstName: string
                  lastName: string
                  email: user@example.com
                  dateOfBirth: '1997-10-31'
              properties:
                firstName:
                  type: string
                  minLength: 1
                lastName:
                  type: string
                  minLength: 1
                email:
                  type: string
                  format: email
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              example-1:
                value:
                  id: 0
                  firstName: string
                  lastName: string
                  email: user@example.com
                  dateOfBirth: '1997-10-31'
                  emailVerified: true
                  createDate: '2019-08-24'
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
            examples:
              example-1:
                value: {}
          text/html:
            schema:
              type: object
              properties: {}
        description: Post the necessary fields for the API to create a new user.
      description: Create new user.
      parameters:
        - $ref: '#/components/parameters/Authorization'
      security: []
    parameters: []
components:
  schemas:
    User:
      title: User
      type: object
      description: User Model
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          format: int32
          minimum: 1
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - dateOfBirth
    Error:
      description: Error model
      type: object
      x-examples:
        example-1:
          statuCode: 400
          error: Bad Request
          message: Invalid request headers input
      properties:
        statuCode:
          type: number
        error:
          type: string
          minLength: 1
        message:
          type: string
          minLength: 1
      required:
        - statuCode
        - error
        - message
      title: Error
  requestBodies: {}
  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
      description: User Id
    Authorization:
      name: Authorization
      in: header
      required: false
      schema:
        type: string
      description: Authorization token
  responses:
    '400':
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            example-1:
              value:
                statuCode: 400
                error: Bad Request
                message: Invalid request headers input
    201-CreateUser:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    200-PatchUser:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    200-GetUser:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            example-1:
              value:
                id: 1
                firstName: string
                lastName: string
                email: user@example.com
                dateOfBirth: '1997-10-31'
                emailVerified: true
                createDate: '2019-08-24'
  examples: {}
  securitySchemes: {}
